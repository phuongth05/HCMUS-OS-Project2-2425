diff --git a/Makefile b/Makefile
index 74e454f..2480f60 100644
--- a/Makefile
+++ b/Makefile
@@ -194,7 +194,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index d1b6bb9..5bf97c9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          freemem(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             nproc_active(void);
+uint64          loadAverage(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 5247b91..9bdd9d9 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -91,3 +91,19 @@ kalloc(void)
   return (void*)r;
 }
 
+uint64
+freemem(void)
+{
+  uint64 bytes = 0;
+  struct run *r;
+
+  acquire(&kmem.lock);
+  r = kmem.freelist;
+  while (r) {
+    bytes += PGSIZE;  // Mỗi khối tự do là 4096 bytes
+    r = r->next;
+  }
+  release(&kmem.lock);
+  return bytes;
+}
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 130d9ce..a1b47d5 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -310,6 +310,10 @@ fork(void)
 
   safestrcpy(np->name, p->name, sizeof(p->name));
 
+
+  np->trace_mask = p->trace_mask;  
+
+
   pid = np->pid;
 
   release(&np->lock);
@@ -693,3 +697,32 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+nproc_active(void)
+{
+  int count = 0;
+  struct proc *p;
+
+  for (p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if (p->state != UNUSED) {
+      count++;
+    }
+    release(&p->lock);
+  }
+  return count;
+}
+
+uint64
+loadAverage(void) 
+{
+  struct proc *p;
+  uint64 count = 0; 
+  for (p = proc; p < &proc[NPROC]; p++) {
+    if (p->state == RUNNABLE || p->state == RUNNING) {
+      count++;
+    }
+  }
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..f1f4a39 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,7 +91,7 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
-
+  int trace_mask;
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..c0ac56a 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,10 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+
+
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,22 +130,93 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo]  sys_sysinfo,
+};
+
+
+
+static char *syscall_names[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "unlink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+  [SYS_trace]   "trace",
+  [SYS_sysinfo] "sysinfo",
 };
 
+static int syscall_arg_count[] = {
+  [SYS_fork]    0,  
+  [SYS_exit]    1,  
+  [SYS_wait]    1,  
+  [SYS_pipe]    1,  
+  [SYS_read]    3,  
+  [SYS_write]   3,  
+  [SYS_close]   1,  
+  [SYS_kill]    1,  
+  [SYS_exec]    2,  
+  [SYS_open]    2,  
+  [SYS_mknod]   3,  
+  [SYS_unlink]  1,  
+  [SYS_fstat]   2,  
+  [SYS_link]    2,  
+  [SYS_mkdir]   1,  
+  [SYS_chdir]   1,  
+  [SYS_dup]     1,  
+  [SYS_getpid]  0,  
+  [SYS_sbrk]    1,  
+  [SYS_sleep]   1,  
+  [SYS_uptime]  0,  
+  [SYS_sysinfo] 1,  
+  [SYS_trace]   1
+};
+// Hàm in đối số
+void
+print_args(int num, struct proc *p)
+{
+  int i;
+  int arg;
+  printf("%d: syscall %s -> %d\n", p->pid, syscall_names[num], (int)p->trapframe->a0);
+  printf("challenge: %d: syscall %s(", p->pid, syscall_names[num]);
+  for(i = 0; i < syscall_arg_count[num]; i++) {
+    argint(i, &arg);
+    if(i > 0) printf(", ");
+    printf("%d", arg);
+  }
+  printf(") -> %d\n", (int)p->trapframe->a0);
+}
+
+
 void
 syscall(void)
 {
   int num;
   struct proc *p = myproc();
-
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-    // Use num to lookup the system call function for num, call it,
-    // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+    if(p->trace_mask & (1 << num)) {
+      print_args(num, p);
+    }
   } else {
-    printf("%d %s: unknown sys call %d\n",
-            p->pid, p->name, num);
+    printf("%d %s: unknown sys call %d\n", p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
-}
+}
\ No newline at end of file
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..23ec55d 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace 22
+#define SYS_sysinfo 23
diff --git a/kernel/sysinfo.h b/kernel/sysinfo.h
index fb878e6..1edd52f 100644
--- a/kernel/sysinfo.h
+++ b/kernel/sysinfo.h
@@ -1,4 +1,5 @@
 struct sysinfo {
   uint64 freemem;   // amount of free memory (bytes)
   uint64 nproc;     // number of process
+  uint64 loadavg;  // load average
 };
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..2c6fb82 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,9 @@
 #include "spinlock.h"
 #include "proc.h"
 
+#include "sysinfo.h"
+#include "syscall.h"
+
 uint64
 sys_exit(void)
 {
@@ -70,6 +73,7 @@ sys_sleep(void)
   return 0;
 }
 
+
 uint64
 sys_kill(void)
 {
@@ -91,3 +95,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_sysinfo(void)
+{
+  uint64 addr;
+  struct sysinfo info;
+
+  argaddr(0, &addr);
+
+  info.freemem = freemem();
+  info.nproc = nproc_active();
+  info.loadavg = loadAverage(); 
+
+  if (copyout(myproc()->pagetable, addr, (char *)&info, sizeof(info)) < 0) {
+    return -1;
+  }
+
+  return 0;
+}
+
+uint64
+sys_trace(void)
+{
+  int mask;
+  argint(0, &mask); 
+  myproc()->trace_mask = mask;  
+  return 0;
+}
\ No newline at end of file
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
index a92d10a..5147829 100644
--- a/user/sysinfotest.c
+++ b/user/sysinfotest.c
@@ -84,6 +84,11 @@ testcall() {
     exit(1);
   }
 
+  // In các giá trị từ sysinfo
+  printf("Free memory: %ld bytes\n", info.freemem);
+  printf("Number of active processes: %ld\n", info.nproc);
+  printf("Load average: %ld\n", info.loadavg);
+
   if (sysinfo((struct sysinfo *) 0xeaeb0b5b00002f5e) !=  0xffffffffffffffff) {
     printf("FAIL: sysinfo succeeded with bad argument\n");
     exit(1);
diff --git a/user/user.h b/user/user.h
index f16fe27..1d639cf 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct sysinfo;  // Khai báo struct sysinfo
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sysinfo(struct sysinfo *);
+int trace(int mask);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
old mode 100755
new mode 100644
index 01e426e..8a5fec6
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("sysinfo");
+entry("trace");
\ No newline at end of file
